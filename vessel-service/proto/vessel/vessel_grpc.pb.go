// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vessel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VesselServiceClient is the client API for VesselService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VesselServiceClient interface {
	Create(ctx context.Context, in *Vessel, opts ...grpc.CallOption) (*Response, error)
	FindAvailable(ctx context.Context, in *Specification, opts ...grpc.CallOption) (*Response, error)
}

type vesselServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVesselServiceClient(cc grpc.ClientConnInterface) VesselServiceClient {
	return &vesselServiceClient{cc}
}

func (c *vesselServiceClient) Create(ctx context.Context, in *Vessel, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.vessel.VesselService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselServiceClient) FindAvailable(ctx context.Context, in *Specification, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.vessel.VesselService/FindAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VesselServiceServer is the server API for VesselService service.
// All implementations must embed UnimplementedVesselServiceServer
// for forward compatibility
type VesselServiceServer interface {
	Create(context.Context, *Vessel) (*Response, error)
	FindAvailable(context.Context, *Specification) (*Response, error)
	mustEmbedUnimplementedVesselServiceServer()
}

// UnimplementedVesselServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVesselServiceServer struct {
}

func (UnimplementedVesselServiceServer) Create(context.Context, *Vessel) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVesselServiceServer) FindAvailable(context.Context, *Specification) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAvailable not implemented")
}
func (UnimplementedVesselServiceServer) mustEmbedUnimplementedVesselServiceServer() {}

// UnsafeVesselServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VesselServiceServer will
// result in compilation errors.
type UnsafeVesselServiceServer interface {
	mustEmbedUnimplementedVesselServiceServer()
}

func RegisterVesselServiceServer(s grpc.ServiceRegistrar, srv VesselServiceServer) {
	s.RegisterService(&VesselService_ServiceDesc, srv)
}

func _VesselService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vessel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.vessel.VesselService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselServiceServer).Create(ctx, req.(*Vessel))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselService_FindAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Specification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselServiceServer).FindAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.vessel.VesselService/FindAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselServiceServer).FindAvailable(ctx, req.(*Specification))
	}
	return interceptor(ctx, in, info, handler)
}

// VesselService_ServiceDesc is the grpc.ServiceDesc for VesselService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VesselService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.vessel.VesselService",
	HandlerType: (*VesselServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VesselService_Create_Handler,
		},
		{
			MethodName: "FindAvailable",
			Handler:    _VesselService_FindAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vessel/vessel.proto",
}
